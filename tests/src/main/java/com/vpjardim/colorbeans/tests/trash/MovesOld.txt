/*
 * Copyright 2015 Vinícius Petrocione Jardim
 */

package com.vpjardim.colorbeans.tests;

import com.badlogic.gdx.utils.IntArray;

import java.util.Iterator;
import java.util.function.Consumer;

/**
 * @author Vinícius Jardim
 * 02/05/2016
 */
public class MovesOld implements Iterator<MovesOld>, Iterable<MovesOld> {

    private IntArray movesAll;
    private IntArray moves2C;
    private IntArray moves1C;

    private int index;
    private IntArray moves;

    private boolean fixedColor;
    private int nCol;

    public int color1;
    public int color2;
    public int position;
    public int rotation;

    public void clear() {

        index = -1;
        moves = null;
        fixedColor = false;

        color1 = 0;
        color2 = 0;
        position = 0;
        rotation = 0;
    }

    public void init(int nCol) {

        movesAll = new IntArray(325);
        moves2C = new IntArray(26);
        moves1C = new IntArray(13);

        this.nCol = nCol;

        clear();

        // === All colors ===
        for(int color1 = 1; color1 < 6; color1++) {
            for(int color2 = color1; color2 < 6; color2++) {

                // No rotation (vertical)
                for(int i = 0; i < nCol; i++)
                    movesAll.add(getMove(color1, color2, i, 0));
                // Rotation = 1 (horizontal)
                for(int i = 0; i < nCol -1; i++)
                    movesAll.add(getMove(color1, color2, i, 1));

                // If the colors are equal, the following moves wore
                // already covered. Do not need the 2 and the 3 rotation
                if(color1 != color2) {
                    // Rotation = 2 (vertical)
                    for (int i = 0; i < nCol; i++)
                        movesAll.add(getMove(color1, color2, i, 2));
                    // Rotation = 3 (horizontal)
                    for (int i = 0; i < nCol - 1; i++)
                        movesAll.add(getMove(color1, color2, i, 3));
                }
            }
        }

        // === Fixed different colors ===

        // No rotation (vertical)
        for(int i = 0; i < nCol; i++)
            moves2C.add(getMove(99, 99, i, 0));
        // Rotation = 1 (horizontal)
        for(int i = 0; i < nCol -1; i++)
            moves2C.add(getMove(99, 99, i, 1));
        // Rotation = 2 (vertical)
        for (int i = 0; i < nCol; i++)
            moves2C.add(getMove(99, 99, i, 2));
        // Rotation = 3 (horizontal)
        for (int i = 0; i < nCol -1; i++)
            moves2C.add(getMove(99, 99, i, 3));

        // === Fixed equal colors ===

        // No rotation (vertical)
        for(int i = 0; i < nCol; i++)
            moves1C.add(getMove(99, 99, i, 0));
        // Rotation = 1 (horizontal)
        for(int i = 0; i < nCol -1; i++)
            moves1C.add(getMove(99, 99, i, 1));
    }

    public void setColor(int color1, int color2) {
        fixedColor = true;
        this.color1 = color1;
        this.color2 = color2;
    }

    public void unsetColor() {
        fixedColor = false;
        color1 = 0;
        color2 = 0;
    }

    public void setMove(boolean fixedColor, int color1, int color2, int position, int rotation) {

        this.fixedColor = fixedColor;
        this.color1 = color1;
        this.color2 = color2;
        this.position = position;
        this.rotation = rotation;
    }

    /**
     * Used when color is fixed, set only position and rotation
     * @param move
     */
    public void setMove(int move) {
        position = (move / 10) % 100;
        rotation = move % 10;
    }

    /**
     *
     * @param fixedColor
     * @param move number in the format AABBPPR (AA = color1, BB color2, PP = position, R = rotation)
     */
    public void setMove(boolean fixedColor, int move) {

        this.fixedColor = fixedColor;
        color1 = move / 100000;
        color2 = (move / 1000) % 100;
        position = (move / 10) % 100;
        rotation = move % 10;
    }

    public static int getMove(int color1, int color2, int position, int rotation) {
        return (color1 * 100000) + (color2 * 1000) + (position * 10) + rotation;
    }

    public int getMove() {
        return MovesOld.getMove(color1, color2, position, rotation);
    }

    @Override
    public boolean hasNext() {

        if(!fixedColor) {
            moves = movesAll;
            return index < movesAll.size -1;
        }
        if(fixedColor && color1 != color2) {
            moves = moves2C;
            return index < moves2C.size -1;
        }
        if(fixedColor && color1 == color2) {
            moves = moves1C;
            return index < moves1C.size -1;
        }

        return false;
    }

    @Override
    public MovesOld next() {

        index++;
        if(fixedColor)
            setMove(moves.get(index));
        else
            setMove(false, moves.get(index));

        return this;
    }

    @Override
    public Iterator<MovesOld> iterator() {
        return this;
    }

    @Override
    public void remove() {}

    @Override
    public void forEachRemaining(Consumer<? super MovesOld> action) {}

    public String toString() {
        return color1 + ";" + color2 + ";" + position + ";" + rotation;
    }
}

