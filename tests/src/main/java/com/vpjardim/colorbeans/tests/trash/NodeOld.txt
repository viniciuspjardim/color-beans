/*
 * Copyright 2015 Vinícius Petrocione Jardim
 */

package com.vpjardim.colorbeans.ai;

import com.badlogic.gdx.utils.Array;
import com.badlogic.gdx.utils.Pool;
import com.vpjardim.colorbeans.Map;

/**
 * @author Vinícius Jardim
 * 30/04/2016.
 */
public class Node implements Pool.Poolable {

    public static Pool<Node> pool = new Pool<Node>(8450) {
        @Override
        protected Node newObject() {
            return new Node();
        }
    };

    Array<Node> children;
    AiMap move;

    float score;
    float scoreSum;
    float bestChildScore;
    int bestChildIndex;

    int color1;
    int color2;
    int position;
    int rotation;

    public Node() {
        children = new Array<Node>(false, 325);
        init();
    }

    public Node getBestChild() {
        return children.get(bestChildIndex);
    }

    public void process() {
        move.process(color1, color2, position, rotation);
        score = Ai2.scoreCalc(move);
        //System.out.println("Score: " + score);
    }

    public Node addChild(int color1, int color2, int position, int rotation) {
        Node n = Node.pool.obtain();
        n.init(this, color1, color2, position, rotation);
        n.process();
        children.add(n);

        if(n.score > bestChildScore) {
            bestChildIndex = children.size -1;
            bestChildScore = n.score;
        }
        return n;
    }

    private void init() {
        score          = AiMap.MOVE_ILLEGAL;
        scoreSum       = 0;
        bestChildScore = AiMap.MOVE_ILLEGAL;
        bestChildIndex = -1;

        color1         = -1;
        color2         = -1;
        position       = -1;
        rotation       = -1;
    }

    public void init(Node parent, int color1, int color2, int position, int rotation) {
        this.move = parent.move.copy();

        this.color1 = color1;
        this.color2 = color2;
        this.position = position;
        this.rotation = rotation;
    }

    public void init(Map m) {
        move = AiMap.pool.obtain();
        move.init(m.b, m.prop.deleteSize, Map.OUT_ROW);
    }

    @Override
    public void reset() {

        for(int i = 0; i < children.size; i++) {
            Node.pool.free(children.get(i));
        }

        children.clear();
        AiMap.pool.free(move);
        move = null;

        init();
    }
}
