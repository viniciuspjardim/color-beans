/*
 * Copyright 2015 Vinícius Petrocione Jardim
 */

package com.vpjardim.colorbeans.ai;

import com.badlogic.gdx.math.MathUtils;
import com.badlogic.gdx.utils.Array;
import com.badlogic.gdx.utils.IntArray;
import com.badlogic.gdx.utils.Pool;
import com.vpjardim.colorbeans.Map;

/**
 * @author Vinícius Jardim
 * 29/07/2016
 */
public class UctNode implements Pool.Poolable {

    public static int objCount = 0;

    public static Pool<UctNode> pool = new Pool<UctNode>(8450) {
        @Override
        protected UctNode newObject() {
            return new UctNode();
        }
    };

    public static final UctNode ILLEGAL_NODE = new UctNode();

    static {
        ILLEGAL_NODE.totalValue = AiMap.MOVE_ILLEGAL;
    }

    public Uct uct;
    public AiMap aiMap;

    public int visits;
    public float totalValue;
    public Array<UctNode> children;
    public IntArray childMovesLeft;

    public int color1;
    public int color2;
    public int position;
    public int rotation;

    public UctNode() {
        objCount++;
        children = new Array<UctNode>(false, 325);
        childMovesLeft = new IntArray(false, 325);
        clear();
    }

    /** Old */
    public void iterate(boolean knownColor) {

        UctNode curr = this;
        uct.visited.add(curr);

        while(!curr.isLeaf()) {
            curr = curr.select();
            uct.visited.add(curr);
        }

        curr.expand(knownColor);
        UctNode n = curr.select();
        uct.visited.add(n);
        double val = n.rollOut();

        for(int i = 0; i < uct.visited.size; i++) {
            uct.visited.get(i).updateStats(val);
        }

        uct.visited.clear();
    }

    /** New */
    public static UctNode treePolice(UctNode n) {

        while(!n.isLeaf()) {

            if(!n.isFullExpanded())
                return n.expand(false);
            else
                n = n.bestChild();
        }

        return n;
    }

    /** Add a child node to this (new) */
    public UctNode expand(boolean knownColor) {

        int rand = MathUtils.random(childMovesLeft.size -1);

        uct.moves.setMove(childMovesLeft.get(rand));
        childMovesLeft.removeIndex(rand);

        UctNode child = UctNode.pool.obtain();
        child.init(uct, this.aiMap, uct.moves.color1, uct.moves.color2, uct.moves.position, uct.moves.rotation);
        children.add(child);

        if(knownColor) {
            child.color1 = uct.color1;
            child.color2 = uct.color2;
        }

        return  child;
    }

    /** New */
    public UctNode bestChild() {

        // #debugCode
        if(children.size < 1) throw new UnsupportedOperationException("Should have at least 1 child");

        UctNode bestChild = null;
        float bestVal = Float.NEGATIVE_INFINITY;

        for(int i = 0; i < children.size; i++) {

            UctNode n = children.get(i);
            // Sum Uct.EPSILON to avoid zero division as this number will be used as a divisor
            float childVisits = n.visits + Uct.EPSILON;

            float currVal =
                    (n.totalValue / childVisits) + Uct.EXP_CONST *
                    (float)Math.sqrt(Math.log(visits + 1) / (childVisits));

            // Small random sum to avoid ties
            currVal += MathUtils.random(Uct.EPSILON);

            if(currVal >= bestVal) {
                bestVal = currVal;
                bestChild = n;
            }
        }

        return bestChild;
    }

    /** Old */
    public UctNode select() {

        UctNode selected = null;
        float bestValue = AiMap.MOVE_ILLEGAL;

        for(UctNode c : children) {

            float uctValue =
                    c.totalValue / (c.visits + Uct.EPSILON) +
                    (float) Math.sqrt(Math.log(visits + 1) / (c.visits + Uct.EPSILON)) +
                    // Small random number to break ties randomly in unexpanded nodes
                    MathUtils.random() * Uct.EPSILON;

            if (uctValue > bestValue) {
                selected = c;
                bestValue = uctValue;
            }
        }

        return selected;
    }

    /** Old */
    public double rollOut() {

        float value;

        boolean illegal = aiMap.process(color1, color2, position, rotation) == AiMap.MOVE_ILLEGAL;

        if(illegal)
            value = AiMap.MOVE_ILLEGAL;
        else {
            value = uct.formula.calc(aiMap);
        }

        return value / 10f;
    }

    /** New */
    public void updateStats(double value) {
        visits++;
        totalValue += value;
    }

    /** New */
    public boolean isLeaf() {
        return children == null || children.size == 0;
    }

    /** New */
    public boolean isFullExpanded() {
        return childMovesLeft.size == 0;
    }

    /** Used to init the tree root */
    public void init(Uct uct, Map m) {
        this.uct = uct;
        aiMap = AiMap.pool.obtain();
        aiMap.init(m.b, m.prop.deleteSize, Map.OUT_ROW);
        childMovesLeft.addAll(uct.moves.getArray(uct.color1, uct.color2));
    }

    /** Used to init non root tree nodes **/
    public void init(Uct uct, AiMap parentMap, int color1, int color2, int position, int rotation) {

        this.uct = uct;
        childMovesLeft.addAll(uct.moves.getArray());
        this.aiMap    = parentMap.copy();
        this.color1   = color1;
        this.color2   = color2;
        this.position = position;
        this.rotation = rotation;
    }

    private void clear() {
        uct        = null;
        visits     = 0;
        totalValue = 0f;
        color1     = -1;
        color2     = -1;
        position   = -1;
        rotation   = -1;
    }

    @Override
    public void reset() {

        for(int i = 0; i < children.size; i++) {
            UctNode.pool.free(children.get(i));
        }

        children.clear();
        childMovesLeft.clear();

        if(aiMap != null) {
            AiMap.pool.free(aiMap);
            aiMap = null;
        }

        clear();
    }
}
