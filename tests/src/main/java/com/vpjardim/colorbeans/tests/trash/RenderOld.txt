    public void renderBatch() {

        //TextureRegion tile;
        TextureAtlas.AtlasRegion tile;

        // Draw map blocks
        for(int i = 0; i < b.length; i++) {

            for(int j = OUT_ROW; j < b[0].length; j++) {

                if(!b[i][j].visible) continue;

                //screen.sr.setColor();
                //tile = screen.beansTiles[b[i][j].intColor -1][b[i][j].tile];
                tile = GameClass.get().atlas.findRegion(b[i][j].strColor, b[i][j].tile + 1);

                /*screen.sr.circle(
                        prop.px + (prop.side / 2f) + (prop.side * i),
                        prop.py - (prop.side / 2f) -  (prop.side * (j -OUT_ROW)) + (b[i][j].py * prop.side),
                        prop.side / 2f
                );*/

                GameClass.get().batch.draw(
                        tile,
                        prop.px + (prop.side * i),
                        prop.py - prop.side - (prop.side * (j -OUT_ROW)) + (b[i][j].py * prop.side),
                        prop.side,
                        prop.side
                );
            }
        }

        // Draw play blocks
        for(int i = 0; i < pb.b.length; i++) {

            for(int j = 0; j < pb.b[0].length; j++) {

                if(pb.b[i][j].intColor == Block.EMPTY) continue;

                //screen.sr.setColor(pb.b[i][j].color);
                //tile = screen.beansTiles[pb.b[i][j].intColor -1][pb.b[i][j].tile];
                tile = GameClass.get().atlas.findRegion(pb.b[i][j].strColor, pb.b[i][j].tile +1);

                /*screen.sr.circle(
                        prop.px + (prop.side / 2f) + (prop.side * (i + pb.mCol -1)) + (pb.b[i][j].px * prop.side),
                        prop.py - (prop.side / 2f) -  (prop.side * (j + pb.mRow -1 -OUT_ROW)) + (pb.b[i][j].py * prop.side),
                        prop.side / 2f
                );*/
                GameClass.get().batch.draw(
                        tile,
                        prop.px + (prop.side * (i + pb.mCol -1)) + (pb.b[i][j].px * prop.side),
                        prop.py - prop.side - (prop.side * (j + pb.mRow -1 -OUT_ROW)) + (pb.b[i][j].py * prop.side),
                        prop.side,
                        prop.side
                );
            }
        }

        // Draw mark at the center block
        /*screen.sr.setColor(Color.WHITE);
        screen.sr.circle(
                prop.px + (prop.side / 2f) + (prop.side * (1 + pb.mCol - 1)) + (pb.b[1][1].px * prop.side),
                prop.py - (prop.side / 2f) - (prop.side * (1 + pb.mRow - 1 - OUT_ROW)) + (pb.b[1][1].py * prop.side),
                prop.side / 8f
        );*/
    }