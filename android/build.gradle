android {

    // Using AndroidKeys env var to keep the path of the file that contain the data for the Android
    // Keys
    def keyPropFile = file("$System.env.AndroidKeys/AndroidKey.properties")
    def keyProp = new Properties()
    keyProp.load(new FileInputStream(keyPropFile))

    signingConfigs {
        AndroidKey {
            storeFile file("$System.env.AndroidKeys/${keyProp['storeFile']}")
            storePassword keyProp["storePassword"]
            keyAlias keyProp["keyAlias"]
            keyPassword keyProp["keyPassword"]
        }
    }

    buildToolsVersion "29.0.2"
    compileSdkVersion 28
    sourceSets {
        main {
            manifest.srcFile "AndroidManifest.xml"
            java.srcDirs = ["src"]
            aidl.srcDirs = ["src"]
            renderscript.srcDirs = ["src"]
            res.srcDirs = ["res"]
            assets.srcDirs = ["assets"]
            jniLibs.srcDirs = ["libs"]
        }
    }

    defaultConfig {
        signingConfig signingConfigs.AndroidKey
        applicationId "com.gmail.vpjardimdev.colorbeans"
        minSdkVersion 16
        targetSdkVersion 28
        versionCode 10
        versionName "0.1.8"
    }
    buildTypes {
        debug {
            minifyEnabled false
            pseudoLocalesEnabled true
            debuggable true
            applicationIdSuffix ".debug"
        }
        // TODO: seams that build variants that invoke proguard are not working anymore. Fix it
        // Debug with ProGuard enabled
        debugPG {
            proguardFiles getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-project.txt"
            minifyEnabled true
            pseudoLocalesEnabled false
            debuggable true
            applicationIdSuffix ".debugPG"
        }
        release {
            proguardFiles getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-project.txt"
            minifyEnabled true
            pseudoLocalesEnabled false
            debuggable false
            signingConfig signingConfigs.AndroidKey
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

// called every time gradle gets executed, takes the native dependencies of
// the natives configuration, and extracts them to the proper libs/ folders
// so they get packed with the APK.
task copyAndroidNatives {
    doFirst {
        file("libs/arm64-v8a/").mkdirs()
        file("libs/x86_64/").mkdirs()
        file("libs/x86/").mkdirs()

        configurations.natives.files.each { jar ->
            def outputDir = null
            if (jar.name.endsWith("natives-arm64-v8a.jar")) outputDir = file("libs/arm64-v8a")
            if (jar.name.endsWith("natives-x86_64.jar")) outputDir = file("libs/x86_64")
            if (jar.name.endsWith("natives-x86.jar")) outputDir = file("libs/x86")
            if (outputDir != null) {
                copy {
                    from zipTree(jar)
                    into outputDir
                    include "*.so"
                }
            }
        }
    }
}

tasks.whenTaskAdded { packageTask ->
    if (packageTask.name.contains("package")) {
        packageTask.dependsOn "copyAndroidNatives"
    }
}

task run(type: Exec) {
    def path
    def localProperties = project.file("../local.properties")
    if (localProperties.exists()) {
        Properties properties = new Properties()
        localProperties.withInputStream { instr ->
            properties.load(instr)
        }
        def sdkDir = properties.getProperty("sdk.dir")
        if (sdkDir) {
            path = sdkDir
        } else {
            path = "$System.env.ANDROID_HOME"
        }
    } else {
        path = "$System.env.ANDROID_HOME"
    }

    def adb = path + "/platform-tools/adb"
    commandLine "$adb", "shell", "am", "start", "-n", "com.vpjardim.colorbeans.android/com.vpjardim.colorbeans.android.AndroidLauncher"
}

// sets up the Android Eclipse project, using the old Ant based build.
eclipse {
    // need to specify Java source sets explicitly, SpringSource Gradle Eclipse plugin
    // ignores any nodes added in classpath.file.withXml
    sourceSets {
        main {
            java.srcDirs "src", "gen"
        }
    }

    jdt {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    classpath {
        plusConfigurations += [project.configurations.compile]
        containers "com.android.ide.eclipse.adt.ANDROID_FRAMEWORK", "com.android.ide.eclipse.adt.LIBRARIES"
    }

    project {
        name = appName + "-android"
        natures "com.android.ide.eclipse.adt.AndroidNature"
        buildCommands.clear()
        buildCommand "com.android.ide.eclipse.adt.ResourceManagerBuilder"
        buildCommand "com.android.ide.eclipse.adt.PreCompilerBuilder"
        buildCommand "org.eclipse.jdt.core.javabuilder"
        buildCommand "com.android.ide.eclipse.adt.ApkBuilder"
    }
}

// sets up the Android Idea project, using the old Ant based build.
idea {
    module {
        sourceDirs += file("src")
        scopes = [COMPILE: [plus: [project.configurations.compile]]]

        iml {
            withXml {
                def node = it.asNode()
                def builder = NodeBuilder.newInstance()
                builder.current = node
                builder.component(name: "FacetManager") {
                    facet(type: "android", name: "Android") {
                        configuration {
                            option(name: "UPDATE_PROPERTY_FILES", value: "true")
                        }
                    }
                }
            }
        }
    }
}
